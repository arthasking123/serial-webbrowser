<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title>Test Page</title>
    <style type="text/css">
		#lightArray table
		{
		 width:60%;
		 height:100%;
		}
		td div{
		 border: solid 1px black;
		 background-color:white;
		 width: 80%;
		 height: 50%;
		 
		}
    </style>
	<!--script src="js/jquery-1.8.3.js" ></script-->
    <script language="javascript" type="text/javascript">
	var lightControl = {
	 allrow:0,allcol:0,
	 lightArrayInit:function(row,col)
	{
	 allrow = row;
	 allcol = col;
	 var html = '';
	 for(var i=0;i<row;i++)
	 {
	  html += '<tr>';
	  for(var j=0;j<col;j++)
	  {
	   html += '<td><div></div></td>';
	  }
	  html += '</tr>';
	  
	 }
     document.getElementById("lightArray").innerHTML = '<table>'+(html)+'</table>';
	},
	 setColorOfAllLight: function(color)
	 {
	  /*$('#lightArray div').css('background-color',color);*/
	 },
	 setColorOfSpecficLight:function(row,col,color)
	 {
	   /*var lightId = allcol*(row-1) + col -1 ;
	   $('#lightArray div').eq(lightId).css('background-color',color);*/
	 }
   }
    </script>
	
 
</head>
<body>
    
	<button id="initSerialButton" onclick="SerialControl.initSerial()" >初始化串口</button>
    <div id="lightArray">
	</div>
	<input />批号
	<input id="delayTime" type="number" min="1" max="100" onKeyPress="return onlyIntegerKeyPress(event)"/>延时时间
	<button id="testButton" onclick="testStart()" >测试</button>
	<button id="reTestButton" onclick="initSerial()" >重测</button>
	<button id="saveButton" onclick="initSerial()" >保存</button>
</body>
<script>
    /*
         * 只能输入正整数,不能有小数点
         *
         */
        onlyIntegerKeyUp = function (e) {
            if (e === undefined) {
                e = window.event;
            }
            var obj = e.srcElement ? e.srcElement : e.target;
            var pattern = /[^\d]/ig;
            var val = obj.value;
            if (pattern.test(val)) {
                var i = getCursortPosition(e);
                obj.value = val.replace(pattern, '');
                setCaretPosition(e, i);
            }
			
        };
        /************************************************
         * 获取光标位置
         *
         * @param ctrl
         * @returns {Number}
         */
        getCursortPosition = function (event) {// 获取光标位置函数
            if (event === undefined || event === null) {
                event = arguments.callee.caller.arguments[0] || window.event;
            }
            var obj = event.srcElement ? event.srcElement : event.target;
            var CaretPos = 0;   // IE Support
            if (document.selection) {
                obj.focus();
                var Sel = document.selection.createRange();
                Sel.moveStart('character', -obj.value.length);
                CaretPos = Sel.text.length;
            } else if (obj.selectionStart || obj.selectionStart == '0') {
                // Firefox support
                CaretPos = obj.selectionStart;
            }

            return (CaretPos);
        };

        /**********************************************
         * 设置光标位置
         *
         * @param ctrl
         * @returns {Number}
         */
        setCaretPosition = function (event, pos) {// 设置光标位置函数
            if (event === undefined || event === null) {
                event = arguments.callee.caller.arguments[0] || window.event;
            }
            var obj = event.srcElement ? event.srcElement : event.target;
            if (pos > 0) {
                pos = pos - 1;//因为把不匹配的字符删除之后,光标会往后移动一个位置
            }
            if (obj.setSelectionRange) {
                obj.focus();
                obj.setSelectionRange(pos, pos);
            } else if (obj.createTextRange) {
                var range = obj.createTextRange();
                range.collapse(true);
                range.moveEnd('character', pos);
                range.moveStart('character', pos);
                range.select();
            }
        };
        /***
         * [0-9]<br>
         *     12:ok;1.2:error
         * @param event
         * @returns {boolean}
         */
        onlyIntegerKeyPress = function onlyIntegerKeyPress(event) {
            event = event || window.event || arguments.callee.caller.arguments[0];
            //console.log(event);
            var charCode2;
            if ('charCode' in event) {//IE7 and IE8 no charCode
                charCode2 = event.charCode;
            } else {
                //console.log('no charCode');
                charCode2 = event.keyCode;
            }
            //console.log(charCode2);
            if (event.keyCode === 8/*back*/ || event.keyCode === 13/*Enter*/ || event.keyCode === 9/*Tab*/ || event.keyCode === 37/*<- */ || event.keyCode === 39/* ->*/) {
                return true;
            } else if (charCode2 < 48 || charCode2 > 57) {/*0-9*/
                event.returnValue = false;
                return false;
            } else {
                return true;
            }
        };
	//init comm function js->c++
     
	
	var SerialControl = {
	 serialInitResult:false,
	 readCallBack:'',
	  initSerial:function ()
	  {
	    this.serialInitResult = true;
	    
		 try{
	     window.external.initComm();
		 }catch(e){this.serialInitResult - false;}
	    
	  },
	  writeCommand:function(data)
	  {
	    if(this.serialInitResult)
		{
		 window.external.writeComm(data);
		}
	  },
	  setReadCallback: function(callback)
	  {
	    if(typeof(callback) == "function")
	    this.readCallBack = callback;
	  },
	  readCommandCallback:function(data)
	  {
	     if(typeof(this.readCallBack) == "function")
	      this.readCallBack(data);
	  }
	
	}
	
	//light array init
	lightControl.lightArrayInit(16,16);
	lightControl.setColorOfAllLight('green');
	lightControl.setColorOfSpecficLight(5,6,'red');
	SerialControl.setReadCallback(function(data){
	 alert(data);
	})
    function testStart()
	{

	    SerialControl.writeCommand("helloworld\r\n");
	    
	}
	//rececallback 
	//write log
	//send comm cmd  js->c++
	function sendSOT()
	{
	  
	}
	</script>
</html>
